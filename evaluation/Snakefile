STRAINS_C_ONLY=["DBVPG6765", "Y12", "YPS128", "UWOPS034614", "SK1", "DBVPG6044"]
STRAINS_ALL=["UWOPS919171", "UFRJ50816", "YPS138", "N44", "CBS432", "UWOPS034614", "YPS128", "Y12", "SK1", "DBVPG6765", "DBVPG6044"]

configfile: "samples.yaml"


rule all:
     input:
        expand("results/assemblyeval_svonly/{version}.strains.{metric}.mean.png", version=["four", "all"], metric=["ids", "mapqs"]),
        expand("results/assemblyeval_svonly/{version}.strains.{metric}.different.mean.png", version=["four", "all"], metric=["ids", "mapqs"])


##############
# CONVERSION #
##############

rule tabix:
    input:
        "{file}.vcf.gz"
    output:
        "{file}.vcf.gz.tbi"
    shell:
        "tabix -p vcf {input}"


rule fix_chromosomes:
    input:
        lambda wildcards: ["calls/{0}_{1}/vcf/{2}.{3}.{0}.{1}.vcf.gz".format(wildcards.graph, wildcards.version, config["samples"][wildcards.strainname], wildcards.options),
                           "calls/{0}_{1}/vcf/{2}.{3}.{0}.{1}.vcf.gz.tbi".format(wildcards.graph, wildcards.version, config["samples"][wildcards.strainname], wildcards.options)]
    output:
        "calls/{graph}_{version}/vcf_processed/{strainname}.{options}.vcf.gz"
    shell:
        "bcftools filter -e 'GT=\"0\" | GT=\"0/0\" | GT~\"\\.\" | ABS(STRLEN(REF) - STRLEN(ALT)) < 50' {input[0]} | sed 's/^S288C.//g' | bgzip -c > {output}"


##############
# EVALUATION #
##############

rule create_sample_graph_from_calls1:
    input:
        calls="calls/{graph}_{version}/vcf_processed/{strain}.{options}.vcf.gz",
        index="calls/{graph}_{version}/vcf_processed/{strain}.{options}.vcf.gz.tbi",
        reference="../assemblies/assemblies_raw/S288C.genome.fa"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.reconstructed.vg"
    log:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.reconstruct.log"
    shell:
        "vg construct -r {input.reference} -v {input.calls} -S -a -f -p 2> {log} > {output}"


rule create_sample_graph_from_calls2:
    input:
        calls="calls/{graph}_{version}/vcf_processed/{strain}.{options}.vcf.gz",
        index="calls/{graph}_{version}/vcf_processed/{strain}.{options}.vcf.gz.tbi",
        graph="{strain}/assemblyeval/{graph}.{version}.{options}/graph.reconstructed.vg"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.vg"
    log:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.log"
    shell:
        "vg mod -v {input.calls} {input.graph} 2> {log} > {output}"


rule prune_graph:
    input:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.vg"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.pruned.vg"
    shell:
        "vg prune {input} > {output}"

rule index_gcsa:
    input:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.pruned.vg"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.gcsa"
    threads:
        5
    log:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.gcsa.log"
    run:
        shell("mkdir -p {wildcards.strain}/assemblyeval/{wildcards.graph}.{wildcards.version}.{wildcards.options}/temp")
        shell("vg index -g {output} -k 11 -t {threads} -p -b {wildcards.strain}/assemblyeval/{wildcards.graph}.{wildcards.version}.{wildcards.options}/temp {input} 2> {log}")


rule index_xg:
    input:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.vg"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.xg"
    shell:
        "vg index -x {output} {input}"


def get_reads(wildcards):
    if wildcards.strain == "UWOPS919171":
        return ["../illumina_reads/SRR4074413.fastq.gz"]
    if wildcards.strain == "UFRJ50816":
        return ["../illumina_reads/SRR4074412.fastq.gz"]
    if wildcards.strain == "YPS138":
        return ["../illumina_reads/SRR4074411.fastq.gz"]
    if wildcards.strain == "N44":
        return ["../illumina_reads/SRR4074394.fastq.gz"]
    if wildcards.strain == "CBS432":
        return ["../illumina_reads/SRR4074385.fastq.gz"]
    if wildcards.strain == "UWOPS034614":
        return ["../illumina_reads/SRR4074384.fastq.gz"]
    if wildcards.strain == "YPS128":
        return ["../illumina_reads/SRR4074383.fastq.gz"]
    if wildcards.strain == "Y12":
        return ["../illumina_reads/SRR4074358.fastq.gz"]
    if wildcards.strain == "SK1":
        return ["../illumina_reads/SRR4074258.fastq.gz"]
    if wildcards.strain == "DBVPG6765":
        return ["../illumina_reads/SRR4074257.fastq.gz"]
    if wildcards.strain == "DBVPG6044":
        return ["../illumina_reads/SRR4074256.fastq.gz"]
    if wildcards.strain == "S288C":
        return ["../illumina_reads/SRR4074255.fastq.gz"]


rule map_reads_to_sample_graph:
    input:
        reads=get_reads,
        xg="{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.xg",
        gcsa="{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.gcsa"
    params:
        graph_base="{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.reads.gam"
    threads: 10
    log:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.alignreads.log"
    shell:
        "vg map -d {params.graph_base} -t {threads} -f {input.reads} 2> {log} > {output}"


rule map_reads_to_linear_graph:
    input:
        reads=get_reads,
        xg="empty_sample_graph/linear_graph.xg",
        gcsa="empty_sample_graph/linear_graph.gcsa"
    params:
        graph_base="empty_sample_graph/linear_graph"
    output:
        "{strain}/assemblyeval/linear/graph.reads.gam"
    threads: 10
    log:
        "{strain}/assemblyeval/linear/graph.alignreads.log"
    shell:
        "vg map -d {params.graph_base} -t {threads} -f {input.reads} 2> {log} > {output}"


rule collect_identities_from_sample_graphs:
    input:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.reads.gam"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.reads.names_identities.tsv"
    shell:
        "vg view -aj {input} | jq -rc '[.name, if .identity == null then 0 else .identity end ] | @tsv' > {output}"


rule collect_identities_from_linear_graph:
    input:
        "{strain}/assemblyeval/linear/graph.reads.gam"
    output:
        "{strain}/assemblyeval/linear/graph.linear.reads.names_identities.tsv"
    shell:
        "vg view -aj {input} | jq -rc '[.name, if .identity == null then 0 else .identity end ] | @tsv' > {output}"


rule collect_mapqs_from_sample_graphs:
    input:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.reads.gam"
    output:
        "{strain}/assemblyeval/{graph}.{version}.{options}/graph.sample.reads.names_mapqs.tsv"
    shell:
        "vg view -aj {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' > {output}"


rule collect_mapqs_from_linear_graph:
    input:
        "{strain}/assemblyeval/linear/graph.reads.gam"
    output:
        "{strain}/assemblyeval/linear/graph.linear.reads.names_mapqs.tsv"
    shell:
        "vg view -aj {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' > {output}"


rule sort_identities_or_mapqs:
    input:
        "{strain}/assemblyeval/{graph}/graph.{type}.reads.names_{metric}.tsv"
    output:
        "{strain}/assemblyeval/{graph}/graph.{type}.reads.names_{metric}.sorted.tsv"
    shell:
        "sort -k 1b,1 {input} > {output}"


rule join_identities:
    input:
        cactus = "{strain}/assemblyeval/cactus.{version}.recall/graph.sample.reads.names_identities.sorted.tsv",
        construct = "{strain}/assemblyeval/constructunion.{version}.recall/graph.sample.reads.names_identities.sorted.tsv",
        linear = "{strain}/assemblyeval/linear/graph.linear.reads.names_identities.sorted.tsv"
    output:
        temp("results/assemblyeval_svonly/{strain}.{version}.joined.identities.tsv")
    shell:
        "join -j 1 -t $'\\t' {input.cactus} {input.construct} | join -j 1 -t $'\\t' - {input.linear} > {output}"


rule join_mapqs:
    input:
        cactus = "{strain}/assemblyeval/cactus.{version}.recall/graph.sample.reads.names_mapqs.sorted.tsv",
        construct = "{strain}/assemblyeval/constructunion.{version}.recall/graph.sample.reads.names_mapqs.sorted.tsv",
        linear = "{strain}/assemblyeval/linear/graph.linear.reads.names_mapqs.sorted.tsv"
    output:
        temp("results/assemblyeval_svonly/{strain}.{version}.joined.mapqs.tsv")
    shell:
        "join -j 1 -t $'\\t' {input.cactus} {input.construct} | join -j 1 -t $'\\t' - {input.linear} > {output}"


rule join_identities_and_mapqs:
    input:
        ids = "results/assemblyeval_svonly/{strain}.{version}.joined.identities.tsv",
        mapqs = "results/assemblyeval_svonly/{strain}.{version}.joined.mapqs.tsv"
    output:
        "results/assemblyeval_svonly/{strain}.{version}.joined.ids_and_mapqs.tsv"
    shell:
        "join -j 1 -t $'\\t' {input.ids} {input.mapqs} > {output}"


rule filter_different:
    input:
        "results/assemblyeval_svonly/{strain}.{version}.joined.ids_and_mapqs.tsv"
    output:
        "results/assemblyeval_svonly/{strain}.{version}.joined.ids_and_mapqs.different.tsv"
    shell:
        "awk '!($2 == $3 && $3 == $4 && $5 == $6 && $6 == $7)' {input} > {output}"


rule cat_means_all:
    input:
        expand("results/assemblyeval_svonly/{strain}.{{version}}.joined.ids_and_mapqs.tsv", strain=STRAINS_ALL)
    output:
        "results/assemblyeval_svonly/{version}.strains.ids_and_mapqs.mean.tsv"
    run:
        shell("rm -f {output}")
        for file in input:
            strain = file.split("/")[2].split(".")[0]
            shell("awk 'OFS=\"\\t\" {{ total_cactus_id += $2; total_vcf_id += $3; total_linear_id += $4; \
                                       total_cactus_mapq += $5; total_vcf_mapq += $6; total_linear_mapq += $7; }} \
                                       END {{ print \"{strain}\", total_cactus_id/NR, total_vcf_id/NR, total_linear_id/NR, \
                                       total_cactus_mapq/NR, total_vcf_mapq/NR, total_linear_mapq/NR }}' {file} >> {output}")


rule cat_means_different:
    input:
        expand("results/assemblyeval_svonly/{strain}.{{version}}.joined.ids_and_mapqs.different.tsv", strain=STRAINS_ALL)
    output:
        "results/assemblyeval_svonly/{version}.strains.ids_and_mapqs.different.mean.tsv"
    run:
        shell("rm -f {output}")
        for file in input:
            strain = file.split("/")[2].split(".")[0]
            shell("awk 'OFS=\"\\t\" {{ total_cactus_id += $2; total_vcf_id += $3; total_linear_id += $4; \
                                       total_cactus_mapq += $5; total_vcf_mapq += $6; total_linear_mapq += $7; }} \
                                       END {{ print \"{strain}\", total_cactus_id/NR, total_vcf_id/NR, total_linear_id/NR, \
                                       total_cactus_mapq/NR, total_vcf_mapq/NR, total_linear_mapq/NR }}' {file} >> {output}")


############
# Plotting #
############

rule plot_mean_identities_and_mapqs:
    input:
        "results/assemblyeval_svonly/{version}.strains.ids_and_mapqs.{mean}.tsv"
    output:
        identities = "results/assemblyeval_svonly/{version}.strains.ids.{mean}.png",
        mapqs = "results/assemblyeval_svonly/{version}.strains.mapqs.{mean}.png"
    shell:
        "Rscript scripts/plot_mean_identities_and_mapqs.R {input} {output.identities} {output.mapqs}"

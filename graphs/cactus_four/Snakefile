# SRR4074413  S.p.    UWOPS91-917.1
# SRR4074412  S.p.    UFRJ50816
# SRR4074411  S.p.    YPS138
# SRR4074394  S.p.    N44
# SRR4074385  S.p.    CBS432
# SRR4074384  S.c.    UWOPS03-461.4
# SRR4074383  S.c.    YPS128
# SRR4074358  S.c.    Y12
# SRR4074258  S.c.    SK1
# SRR4074257  S.c.    DBVPG6765
# SRR4074256  S.c.    DBVPG6044
# SRR4074255  S.c.    S288c

SAMPLES=["SRR4074413", "SRR4074412", "SRR4074411", "SRR4074394", "SRR4074385", "SRR4074384", "SRR4074383", "SRR4074358", "SRR4074258", "SRR4074257", "SRR4074256", "SRR4074255"]

rule all:
    input:
        expand("mappings/{sample}.mapped.sorted.gam", sample=SAMPLES),
        "exploded/component0.xg",
        "mappings/stats/constructunion_four.mapq.png",
        "mappings/stats/constructunion_four.identity.png"


rule hal2vg:
    input:
        "cactusoutput.hal"
    output:
        "yeast.vg"
    shell:
        "~/bin/hal2vg_fork/hal2vg --noAncestors --refGenome S288C {input} > {output}"


rule split_nodes:
    input:
        "yeast.vg"
    output:
        "yeast.chop32.vg"
    shell:
        "vg mod -X 32 {input} > {output}"


rule explode_graph:
    input:
        "yeast.chop32.vg"
    output:
        "exploded/component0.vg"
    shell:
        "vg explode {input} exploded/"


rule create_gbwt:
    input:
        "exploded/component0.vg"
    output:
        gbwt="yeast.final.gbwt",
        threadnames="thread_names"
    shell:
        "vg index -T -G {output.gbwt} -F {output.threadnames} {input}"


rule remove_paths:
    input:
        "exploded/component0.vg"
    output:
        "yeast.final.vg"
    shell:
        "vg mod -D {input} > {output}"


rule create_xg:
    input:
        vg="yeast.final.vg",
        threadnames="thread_names"
    output:
        xg="yeast.final.xg"
    shell:
        "vg index -x {output.xg} -F {input.threadnames} {input.vg}"


rule create_xg_with_paths:
    input:
        vg="exploded/component0.vg",
        threadnames="thread_names"
    output:
        "exploded/component0.xg"
    shell:
        "vg index -x {output} -F {input.threadnames} {input.vg}"


rule prune_graph:
    input:
        gbwt="yeast.final.gbwt",
        vg="yeast.final.vg"
    output:
        node_mapping="node_mapping",
        graph="yeast.final.pruned.vg"
    shell:
        "vg prune -u -g {input.gbwt} -m {output.node_mapping} {input.vg} > {output.graph}"


rule create_gcsa:
    input:
        node_mapping="node_mapping",
        graph="yeast.final.pruned.vg"
    output:
        "yeast.final.gcsa"
    shell:
        "vg index -g {output} -f {input.node_mapping} -b temp {input.graph}"


rule map_reads:
    input:
        xg="yeast.final.xg",
        gcsa="yeast.final.gcsa",
        reads="../../illumina_reads/{sample}.fastq.gz"
    output:
        "mappings/{sample}.mapped.gam"
    threads: 10
    shell:
        "vg map -t {threads} -x {input.xg} -g {input.gcsa} -f {input.reads} > mappings/{wildcards.sample}.mapped.gam"


rule count_mapped_reads:
    input:
        "mappings/{sample}.mapped.gam"
    output:
        "mappings/stats/{sample}.tsv"
    run:
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>0' | wc -l > {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>=10' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>=20' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>=30' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>=40' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>=50' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv' | awk '$2>=60' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .identity == null then 0 else .identity end ] | @tsv' | awk '$2>=1' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .identity == null then 0 else .identity end ] | @tsv' | awk '$2>=0.9' | wc -l >> {output}")
        shell("vg view -a {input} | jq -rc '[.name, if .identity == null then 0 else .identity end ] | @tsv' | awk '$2>=0.5' | wc -l >> {output}")
        shell("vg view -a {input} | wc -l >> {output}")


rule cat_counts:
    input:
        stats=expand("mappings/stats/{sample}.tsv", sample=SAMPLES),
        samples="../../illumina_reads/samples.txt"
    output:
        "mappings/stats/all.tsv"
    run:
        for f in input.stats:
            sample = f.split("/")[2].split(".")[0]
            shell("cat {f} | tr '\\n' '\\t' >> {output}")
            shell("echo -e -n \"cactus\\t\" >> {output}")
            shell("grep {sample} {input.samples} | awk '{{ print $3}}' >> {output}")


rule plot_mapping_quality:
    input:
        cactus="mappings/stats/all.tsv",
        construct="../{constructgraph}_four/mappings/stats/all.tsv"
    output:
        "mappings/stats/{constructgraph}_four.mapq.png"
    shell:
        "Rscript scripts/plot_mapping_quality.R {input.construct} {input.cactus} {output}"


rule plot_identity:
    input:
        cactus="mappings/stats/all.tsv",
        construct="../{constructgraph}_four/mappings/stats/all.tsv"
    output:
        "mappings/stats/{constructgraph}_four.identity.png"
    shell:
        "Rscript scripts/plot_identity.R {input.construct} {input.cactus} {output}"


rule sort_gam:
    input:
        "mappings/{sample}.mapped.gam"
    output:
        sorted="mappings/{sample}.mapped.sorted.gam",
        gai="mappings/{sample}.mapped.sorted.gam.gai"
    threads: 2
    shell:
        "vg gamsort -t {threads} -i {output.gai} {input} > {output.sorted}"
